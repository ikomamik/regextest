#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

# parser classes
require 'regtest/front/empty'          # parser class for empty part ("", (|) etc.)
require 'regtest/front/letter'         # parser class for a letter
require 'regtest/front/range'          # parser class for a range of letters
require 'regtest/front/selectable'     # parser class for a selectable element
require 'regtest/front/parenthesis'    # parser class for a parenthesis
require 'regtest/front/repeatable'     # parser class for a repeatable elements
require 'regtest/front/sequence'       # parser class for a sequence of elements
require 'regtest/front/bracket'        # parser class for a character class (bracket)
require 'regtest/front/anchor'         # parser class for a anchor
require 'regtest/front/back-refer'     # parser class for a back reference
require 'regtest/front/bracket-parser' # bracket parser

class RegtestFrontParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 202)
# modules for sharing procedures with bracket parser
include Regtest::Front::Empty
include Regtest::Front::Letter
include Regtest::Front::Range
include Regtest::Front::Selectable
include Regtest::Front::Parenthesis
include Regtest::Front::Repeatable
include Regtest::Front::Sequence
include Regtest::Front::Bracket
include Regtest::Front::Anchor
include Regtest::Front::BackRefer

# execute to parse
def parse(lex_words, options)
  @options = options
  
  # scanned lexical words
  @q = lex_words
  
  # bracket parser (class name is strange because of racc's restriction)
  @bracket_parser = RegtestFrontBracketParser.new
  
  # delete comments (since it is complecated to handle comments)
  @q = @q.delete_if{|token| token[0] == :LEX_COMMENT}
  
  # execute to parse
  begin
    parse_result = do_parse
  rescue Racc::ParseError => ex
    raise ex.message
  end
  
  parse_result
end

# parse next token
def next_token
  @q.shift
end

# error handling routine. commented out because of readibility problem
#def on_error(t, val, vstack)
#  if val
#    raise "Parse error. offset=#{val[1]}, letter=#{val[0]}, stack=#{vstack}"
#  else
#    raise "Parse error. t=#{t}, val=#{val}, vstack=#{vstack}"
#  end
#end
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'87,46,89,52,94,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70',
'71,72,73,74,75,76,77,78,80,81,83,79,82,49,87,42,41,52,46,53,54,55,56',
'57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80',
'81,83,79,82,49,87,137,42,52,94,53,54,55,56,57,58,59,60,61,62,63,64,65',
'66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,79,82,49,87,,,52,,53',
'54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76',
'77,78,80,81,83,79,82,49,134,,133,129,132,130,131,101,102,103,104,105',
'106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122',
'123,124,125,126,128,100,127,134,,133,129,132,130,131,101,102,103,104',
'105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121',
'122,123,124,125,126,128,100,127,134,,133,129,132,130,131,101,102,103',
'104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120',
'121,122,123,124,125,126,128,100,127,4,6,,9,,10,11,12,13,14,15,16,17',
'18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40',
'4,6,,9,,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29',
'30,31,32,33,34,35,36,37,38,39,40,4,6,,9,,10,11,12,13,14,15,16,17,18',
'19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,134',
',133,129,132,130,131,101,102,103,104,105,106,107,108,109,110,111,112',
'113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,100,127',
'134,,133,129,132,130,131,101,102,103,104,105,106,107,108,109,110,111',
'112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,100',
'127,134,,133,129,132,130,131,101,102,103,104,105,106,107,108,109,110',
'111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128',
'100,127,134,,133,129,132,130,131,101,102,103,104,105,106,107,108,109',
'110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126',
'128,100,127,134,,133,129,132,130,131,101,102,103,104,105,106,107,108',
'109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125',
'126,128,100,127,134,,133,129,132,130,131,101,102,103,104,105,106,107',
'108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124',
'125,126,128,100,127,134,,133,129,132,130,131,101,102,103,104,105,106',
'107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123',
'124,125,126,128,100,127,134,,133,129,132,130,131,101,102,103,104,105',
'106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122',
'123,124,125,126,128,100,127,134,,133,129,132,130,131,101,102,103,104',
'105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121',
'122,123,124,125,126,128,100,127,134,,133,129,132,130,131,101,102,103',
'104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120',
'121,122,123,124,125,126,128,100,127,4,6,,9,,10,11,12,13,14,15,16,17',
'18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40',
'4,6,,9,,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29',
'30,31,32,33,34,35,36,37,38,39,40,134,,133,129,132,130,131,101,102,103',
'104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120',
'121,122,123,124,125,126,128,100,127,134,,133,129,132,130,131,101,102',
'103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119',
'120,121,122,123,124,125,126,128,100,127,134,,133,129,132,130,131,101',
'102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118',
'119,120,121,122,123,124,125,126,128,100,127,134,,133,129,132,130,131',
'101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117',
'118,119,120,121,122,123,124,125,126,128,100,127,134,,133,129,132,130',
'131,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116',
'117,118,119,120,121,122,123,124,125,126,128,100,127,134,,133,129,132',
'130,131,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115',
'116,117,118,119,120,121,122,123,124,125,126,128,100,127,134,,133,129',
'132,130,131,101,102,103,104,105,106,107,108,109,110,111,112,113,114',
'115,116,117,118,119,120,121,122,123,124,125,126,128,100,127,134,,133',
'129,132,130,131,101,102,103,104,105,106,107,108,109,110,111,112,113',
'114,115,116,117,118,119,120,121,122,123,124,125,126,128,100,127,134',
',133,129,132,130,131,101,102,103,104,105,106,107,108,109,110,111,112',
'113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,100,127',
'134,,133,129,132,130,131,101,102,103,104,105,106,107,108,109,110,111',
'112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,100',
'127,134,,133,129,132,130,131,101,102,103,104,105,106,107,108,109,110',
'111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128',
'100,127,134,,133,129,132,130,131,101,102,103,104,105,106,107,108,109',
'110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126',
'128,100,127,134,,133,129,132,130,131,101,102,103,104,105,106,107,108',
'109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125',
'126,128,100,127,134,,133,129,132,130,131,101,102,103,104,105,106,107',
'108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124',
'125,126,128,100,127,134,,133,129,132,130,131,101,102,103,104,105,106',
'107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123',
'124,125,126,128,100,127,134,,133,129,132,130,131,101,102,103,104,105',
'106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122',
'123,124,125,126,128,100,127,134,,133,129,132,130,131,101,102,103,104',
'105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121',
'122,123,124,125,126,128,100,127,134,,133,129,132,130,131,101,102,103',
'104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120',
'121,122,123,124,125,126,128,100,127,134,,133,129,132,130,131,101,102',
'103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119',
'120,121,122,123,124,125,126,128,100,127,134,,133,129,132,130,131,101',
'102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118',
'119,120,121,122,123,124,125,126,128,100,127,134,,133,129,132,130,131',
'101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117',
'118,119,120,121,122,123,124,125,126,128,100,127,134,,133,129,132,130',
'131,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116',
'117,118,119,120,121,122,123,124,125,126,128,100,127,6,,9,,10,11,12,13',
'14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36',
'37,38,39,40,44,,9,,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26',
'27,28,29,30,31,32,33,34,35,36,37,38,39,40,6,,9,,10,11,12,13,14,15,16',
'17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39',
'40,44,,9,,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29',
'30,31,32,33,34,35,36,37,38,39,40,6,,9,,10,11,12,13,14,15,16,17,18,19',
'20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,,9',
',10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32',
'33,34,35,36,37,38,39,40,44,,9,,10,11,12,13,14,15,16,17,18,19,20,21,22',
'23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,52,,53,54,55,56',
'57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80',
'81,83,79,82,93,52,,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69',
'70,71,72,73,74,75,76,77,78,80,81,83,79,82,49,52,,53,54,55,56,57,58,59',
'60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,79',
'82,93,52,,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72',
'73,74,75,76,77,78,80,81,83,79,82,49,52,,53,54,55,56,57,58,59,60,61,62',
'63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,79,82,49,52',
',53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75',
'76,77,78,80,81,83,79,82,93,52,,53,54,55,56,57,58,59,60,61,62,63,64,65',
'66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,83,79,82,93,42,137,42,137',
'143,142,135,141,137,42,,,136,139' ]
        racc_action_table = arr = ::Array.new(2085, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'10,5,41,10,92,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,10,10,10,10,87,2,1,87,43,87,87,87,87,87',
'87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,87,53,138,45,53,48,53,53,53,53,53,53,53,53,53,53,53,53,53,53',
'53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,52,,,52,,52,52',
'52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52',
'52,52,52,52,52,52,52,83,,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83',
'83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,131,,131,131',
'131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131',
'131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,130,,130',
'130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130',
'130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,9,9',
',9,,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0',
'0,,0,,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0',
'11,11,,11,,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,129,,129,129,129,129,129,129,129',
'129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129',
'129,129,129,129,129,129,129,129,129,129,128,,128,128,128,128,128,128',
'128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128',
'128,128,128,128,128,128,128,128,128,128,128,127,,127,127,127,127,127',
'127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127',
'127,127,127,127,127,127,127,127,127,127,127,127,126,,126,126,126,126',
'126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126',
'126,126,126,126,126,126,126,126,126,126,126,126,126,125,,125,125,125',
'125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125',
'125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,,124,124',
'124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124',
'124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,123,,123',
'123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123',
'123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,122',
',122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122',
'122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122',
'132,,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132',
'132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132',
'132,133,,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133',
'133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133',
'133,133,54,54,,54,,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54',
'54,54,54,54,54,54,54,54,54,54,54,54,54,54,4,4,,4,,4,4,4,4,4,4,4,4,4',
'4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,121,,121,121,121,121,121',
'121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121',
'121,121,121,121,121,121,121,121,121,121,121,121,109,,109,109,109,109',
'109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109',
'109,109,109,109,109,109,109,109,109,109,109,109,109,119,,119,119,119',
'119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119',
'119,119,119,119,119,119,119,119,119,119,119,119,119,119,134,,134,134',
'134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134',
'134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,118,,118',
'118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118',
'118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,117',
',117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117',
'117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117',
'116,,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116',
'116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116',
'116,115,,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115',
'115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115',
'115,115,114,,114,114,114,114,114,114,114,114,114,114,114,114,114,114',
'114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114',
'114,114,114,113,,113,113,113,113,113,113,113,113,113,113,113,113,113',
'113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113',
'113,113,113,113,112,,112,112,112,112,112,112,112,112,112,112,112,112',
'112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112',
'112,112,112,112,112,111,,111,111,111,111,111,111,111,111,111,111,111',
'111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111',
'111,111,111,111,111,111,110,,110,110,110,110,110,110,110,110,110,110',
'110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110',
'110,110,110,110,110,110,110,101,,101,101,101,101,101,101,101,101,101',
'101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101',
'101,101,101,101,101,101,101,101,102,,102,102,102,102,102,102,102,102',
'102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102',
'102,102,102,102,102,102,102,102,102,103,,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,104,,104,104,104,104,104,104',
'104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104',
'104,104,104,104,104,104,104,104,104,104,104,105,,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,106,,106,106,106,106',
'106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106',
'106,106,106,106,106,106,106,106,106,106,106,106,106,107,,107,107,107',
'107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107',
'107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,,108,108',
'108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108',
'108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,120,,120',
'120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120',
'120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,49,',
'49,,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49',
'49,49,49,49,49,49,49,49,49,140,,140,,140,140,140,140,140,140,140,140',
'140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140',
'140,140,140,140,140,140,42,,42,,42,42,42,42,42,42,42,42,42,42,42,42',
'42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,95,,95,,95',
'95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95',
'95,95,95,95,95,95,95,93,,93,,93,93,93,93,93,93,93,93,93,93,93,93,93',
'93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,3,,3,,3,3,3,3',
'3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,90,,90,,90,90',
'90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90',
'90,90,90,90,90,90,91,,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,6,,6,6,6,6,6,6,6,6,6',
'6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,86,,86,86,86,86,86,86',
'86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86',
'86,86,86,137,,137,137,137,137,137,137,137,137,137,137,137,137,137,137',
'137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137',
'137,44,,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44',
'44,44,44,44,44,44,44,44,44,44,44,44,178,,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,47,,47,47,47,47,47,47,47,47,47,47,47',
'47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,98,97',
'84,96,98,97,84,96,85,88,,,85,88' ]
        racc_action_check = arr = ::Array.new(2085, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   290,    39,    36,  1760,   758,    -3,  1862,   nil,   nil,   254,
    -2,   326,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,  1655,    37,  1964,    74,   nil,  2032,    74,  1585,
   nil,   nil,   109,    72,   722,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   146,  2071,  2077,  1896,    35,  2078,   nil,
  1795,  1828,     0,  1725,   nil,  1690,  2072,  2070,  2069,   nil,
   nil,  1262,  1298,  1334,  1370,  1406,  1442,  1478,  1514,   830,
  1226,  1190,  1154,  1118,  1082,  1046,  1010,   974,   938,   866,
  1550,   794,   614,   578,   542,   506,   470,   434,   398,   362,
   218,   182,   650,   686,   902,   nil,   nil,  1930,    73,   nil,
  1620,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1998 ]

racc_action_default = [
    -2,  -125,    -1,    -3,    -2,    -7,  -125,   -11,   -13,    -2,
   -46,    -2,   -17,   -18,   -19,   -20,   -21,   -22,   -23,   -24,
   -25,   -26,   -27,   -28,   -29,   -30,   -31,   -32,   -33,   -34,
   -35,   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,
   -45,  -125,    -5,    -8,  -125,    -6,   -12,    -9,   -51,  -125,
   -55,   -57,   -46,   -46,    -2,   -61,   -62,   -63,   -64,   -65,
   -66,   -67,   -68,   -69,   -70,   -71,   -72,   -73,   -74,   -75,
   -76,   -77,   -78,   -79,   -80,   -81,   -82,   -83,   -84,   -85,
   -86,   -87,   -88,  -125,  -125,  -125,   -47,   -46,  -125,   179,
    -4,   -10,   -52,  -125,   -56,   -53,  -125,  -125,  -125,   -89,
   -90,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,
  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,
  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,
  -125,  -125,  -125,  -125,  -125,   -14,   -15,   -49,   -50,   -16,
   -54,   -58,   -59,   -60,   -91,   -92,   -93,   -94,   -95,   -96,
   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,
  -107,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,   -48 ]

racc_goto_table = [
    43,    47,    92,     2,    90,    85,     1,    45,   nil,   nil,
   nil,    95,    84,   nil,    88,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    91,
   nil,    92,   nil,   nil,   nil,   nil,    92,    96,    97,   nil,
   nil,   nil,   nil,   nil,   nil,   140,   nil,    98,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    99,   nil,   nil,   nil,   nil,
   nil,   nil,   138,   nil,   nil,   nil,   nil,    43,   nil,   nil,
   nil,   nil,    43,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   nil,   nil,   nil,
   nil,   nil,   178,    92,   nil,   nil,   nil,    43 ]

racc_goto_check = [
     4,     5,     9,     2,     3,     8,     1,     2,   nil,   nil,
   nil,     3,     2,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,
   nil,     9,   nil,   nil,   nil,   nil,     9,     8,     8,   nil,
   nil,   nil,   nil,   nil,   nil,     3,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,
   nil,   nil,     8,   nil,   nil,   nil,   nil,     4,   nil,   nil,
   nil,   nil,     4,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,   nil,   nil,   nil,
   nil,   nil,     5,     9,   nil,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     6,     3,   -38,    -3,    -5,   nil,   nil,    -5,   -45,
   nil,   nil,    -8 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     5,    86,     7,     8,   nil,    48,
    50,    51,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 40, :_reduce_none,
  0, 41, :_reduce_2,
  1, 41, :_reduce_3,
  3, 41, :_reduce_4,
  2, 41, :_reduce_5,
  2, 41, :_reduce_6,
  1, 42, :_reduce_7,
  2, 42, :_reduce_8,
  2, 42, :_reduce_9,
  3, 42, :_reduce_10,
  1, 43, :_reduce_11,
  2, 43, :_reduce_12,
  1, 45, :_reduce_13,
  3, 45, :_reduce_14,
  3, 45, :_reduce_15,
  3, 45, :_reduce_16,
  1, 46, :_reduce_17,
  1, 46, :_reduce_18,
  1, 46, :_reduce_19,
  1, 46, :_reduce_20,
  1, 46, :_reduce_21,
  1, 46, :_reduce_22,
  1, 46, :_reduce_23,
  1, 46, :_reduce_24,
  1, 46, :_reduce_25,
  1, 46, :_reduce_26,
  1, 46, :_reduce_27,
  1, 46, :_reduce_28,
  1, 46, :_reduce_29,
  1, 46, :_reduce_30,
  1, 46, :_reduce_31,
  1, 46, :_reduce_32,
  1, 46, :_reduce_33,
  1, 46, :_reduce_34,
  1, 46, :_reduce_35,
  1, 46, :_reduce_36,
  1, 46, :_reduce_37,
  1, 46, :_reduce_38,
  1, 46, :_reduce_39,
  1, 46, :_reduce_40,
  1, 46, :_reduce_41,
  1, 46, :_reduce_42,
  1, 46, :_reduce_43,
  1, 46, :_reduce_44,
  1, 46, :_reduce_45,
  0, 47, :_reduce_46,
  1, 47, :_reduce_47,
  3, 47, :_reduce_48,
  2, 47, :_reduce_49,
  2, 47, :_reduce_50,
  1, 44, :_reduce_51,
  2, 44, :_reduce_52,
  2, 44, :_reduce_53,
  3, 44, :_reduce_54,
  1, 48, :_reduce_55,
  2, 48, :_reduce_56,
  1, 49, :_reduce_57,
  3, 49, :_reduce_58,
  3, 49, :_reduce_59,
  3, 49, :_reduce_60,
  1, 50, :_reduce_61,
  1, 50, :_reduce_62,
  1, 50, :_reduce_63,
  1, 50, :_reduce_64,
  1, 50, :_reduce_65,
  1, 50, :_reduce_66,
  1, 50, :_reduce_67,
  1, 50, :_reduce_68,
  1, 50, :_reduce_69,
  1, 50, :_reduce_70,
  1, 50, :_reduce_71,
  1, 50, :_reduce_72,
  1, 50, :_reduce_73,
  1, 50, :_reduce_74,
  1, 50, :_reduce_75,
  1, 50, :_reduce_76,
  1, 50, :_reduce_77,
  1, 50, :_reduce_78,
  1, 50, :_reduce_79,
  1, 50, :_reduce_80,
  1, 50, :_reduce_81,
  1, 50, :_reduce_82,
  1, 50, :_reduce_83,
  1, 50, :_reduce_84,
  1, 50, :_reduce_85,
  1, 50, :_reduce_86,
  1, 50, :_reduce_87,
  1, 50, :_reduce_88,
  2, 50, :_reduce_89,
  1, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none ]

racc_reduce_n = 125

racc_shift_n = 179

racc_token_table = {
  false => 0,
  :error => 1,
  :LEX_OR => 2,
  :LEX_OPTION_PAREN_1 => 3,
  :LEX_QUANTIFIER => 4,
  :LEX_PAREN_START => 5,
  :LEX_PAREN_END => 6,
  :LEX_PAREN_START_EX1 => 7,
  :LEX_PAREN_START_EX2 => 8,
  :LEX_CHAR => 9,
  :LEX_BACK_REFER => 10,
  :LEX_CODE_LITERAL => 11,
  :LEX_NAMED_REFER => 12,
  :LEX_NAMED_GENERATE => 13,
  :LEX_CONTROL_LETTER => 14,
  :LEX_META_LETTER => 15,
  :LEX_ESCAPED_LETTER => 16,
  :LEX_UNICODE => 17,
  :LEX_SIMPLIFIED_CLASS => 18,
  :LEX_UNICODE_CLASS => 19,
  :LEX_BRACKET => 20,
  :LEX_ANC_LINE_BEGIN => 21,
  :LEX_ANC_LINE_END => 22,
  :LEX_ANC_WORD_BOUND => 23,
  :LEX_ANC_WORD_UNBOUND => 24,
  :LEX_ANC_STRING_BEGIN => 25,
  :LEX_ANC_STRING_END => 26,
  :LEX_ANC_STRING_END2 => 27,
  :LEX_ANC_LOOK_BEHIND2 => 28,
  :LEX_ANC_MATCH_START => 29,
  :LEX_SPECIAL_LETTER => 30,
  :LEX_MINUS => 31,
  :LEX_AND_AND => 32,
  :LEX_SPACE => 33,
  :LEX_SIMPLE_ESCAPE => 34,
  :LEX_SHARP => 35,
  :LEX_NEW_LINE => 36,
  :LEX_ANY_LETTER => 37,
  :LEX_OPTION_PAREN_2 => 38 }

racc_nt_base = 39

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LEX_OR",
  "LEX_OPTION_PAREN_1",
  "LEX_QUANTIFIER",
  "LEX_PAREN_START",
  "LEX_PAREN_END",
  "LEX_PAREN_START_EX1",
  "LEX_PAREN_START_EX2",
  "LEX_CHAR",
  "LEX_BACK_REFER",
  "LEX_CODE_LITERAL",
  "LEX_NAMED_REFER",
  "LEX_NAMED_GENERATE",
  "LEX_CONTROL_LETTER",
  "LEX_META_LETTER",
  "LEX_ESCAPED_LETTER",
  "LEX_UNICODE",
  "LEX_SIMPLIFIED_CLASS",
  "LEX_UNICODE_CLASS",
  "LEX_BRACKET",
  "LEX_ANC_LINE_BEGIN",
  "LEX_ANC_LINE_END",
  "LEX_ANC_WORD_BOUND",
  "LEX_ANC_WORD_UNBOUND",
  "LEX_ANC_STRING_BEGIN",
  "LEX_ANC_STRING_END",
  "LEX_ANC_STRING_END2",
  "LEX_ANC_LOOK_BEHIND2",
  "LEX_ANC_MATCH_START",
  "LEX_SPECIAL_LETTER",
  "LEX_MINUS",
  "LEX_AND_AND",
  "LEX_SPACE",
  "LEX_SIMPLE_ESCAPE",
  "LEX_SHARP",
  "LEX_NEW_LINE",
  "LEX_ANY_LETTER",
  "LEX_OPTION_PAREN_2",
  "$start",
  "reg_exp",
  "reg_sel",
  "reg_seq",
  "reg_rep",
  "reg_seq_ex",
  "reg_elm",
  "reg_let",
  "reg_sel_ex",
  "reg_rep_ex",
  "reg_elm_ex",
  "reg_let_ex",
  "reg_comment_ex" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_2(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_3(val, _values)
    Selectable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_4(val, _values)
    val[0].add(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_5(val, _values)
    val[0].add(TEmpty.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_6(val, _values)
    sel = Selectable.new(TEmpty.new); sel.add(val[1]); sel
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_7(val, _values)
    Sequence.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_8(val, _values)
    val[0].add(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_9(val, _values)
    Sequence.new(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_10(val, _values)
    val[0].add(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_11(val, _values)
    Repeatable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_12(val, _values)
    val[0].set_quant(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_13(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_14(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_15(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_16(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_17(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_18(val, _values)
    BackRefer.new(:LEX_BACK_REFER,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_19(val, _values)
    TLetter.new(:LEX_CODE_LITERAL,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_20(val, _values)
    BackRefer.new(:LEX_NAMED_REFER,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_21(val, _values)
    BackRefer.new(:LEX_NAMED_GENERATE, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_22(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_23(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_24(val, _values)
    TLetter.new(:LEX_ESCAPED_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_25(val, _values)
    TLetter.new(:LEX_UNICODE,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_26(val, _values)
    TLetter.new(:LEX_SIMPLIFIED_CLASS, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_27(val, _values)
    TLetter.new(:LEX_UNICODE_CLASS,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_28(val, _values)
    @bracket_parser.parse(val[0], @options)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_29(val, _values)
    Anchor.new(:LEX_ANC_LINE_BEGIN,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_30(val, _values)
    Anchor.new(:LEX_ANC_LINE_END,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_31(val, _values)
    Anchor.new(:LEX_ANC_WORD_BOUND,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_32(val, _values)
    Anchor.new(:LEX_ANC_WORD_UNBOUND, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_33(val, _values)
    Anchor.new(:LEX_ANC_STRING_BEGIN, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_34(val, _values)
    Anchor.new(:LEX_ANC_STRING_END,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_35(val, _values)
    Anchor.new(:LEX_ANC_STRING_END2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_36(val, _values)
    Anchor.new(:LEX_ANC_LOOK_BEHIND2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_37(val, _values)
    Anchor.new(:LEX_ANC_MATCH_START, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_38(val, _values)
    TLetter.new(:LEX_SPECIAL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_39(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_40(val, _values)
    TLetter.new(:LEX_AND_AND,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_41(val, _values)
    TLetter.new(:LEX_SPACE,          val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 72)
  def _reduce_42(val, _values)
    TLetter.new(:LEX_SIMPLE_ESCAPE,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_43(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_44(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_45(val, _values)
    TLetter.new(:LEX_ANY_LETTER,     val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_46(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_47(val, _values)
    Selectable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_48(val, _values)
    val[0].add(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 86)
  def _reduce_49(val, _values)
    val[0].add(TEmpty.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_50(val, _values)
    sel = Selectable.new(TEmpty.new); sel.add(val[1]); sel
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_51(val, _values)
    Sequence.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_52(val, _values)
    val[0].add(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_53(val, _values)
    Sequence.new(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_54(val, _values)
    val[0].add(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_55(val, _values)
    Repeatable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_56(val, _values)
    val[0].set_quant(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_57(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_58(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 112)
  def _reduce_59(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_60(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_61(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_62(val, _values)
    BackRefer.new(:LEX_BACK_REFER,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 119)
  def _reduce_63(val, _values)
    TLetter.new(:LEX_CODE_LITERAL,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_64(val, _values)
    BackRefer.new(:LEX_NAMED_REFER,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_65(val, _values)
    BackRefer.new(:LEX_NAMED_GENERATE, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 122)
  def _reduce_66(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 123)
  def _reduce_67(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 124)
  def _reduce_68(val, _values)
    TLetter.new(:LEX_ESCAPED_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 125)
  def _reduce_69(val, _values)
    TLetter.new(:LEX_UNICODE,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_70(val, _values)
    TLetter.new(:LEX_SIMPLIFIED_CLASS, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 127)
  def _reduce_71(val, _values)
    TLetter.new(:LEX_UNICODE_CLASS,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 128)
  def _reduce_72(val, _values)
    @bracket_parser.parse(val[0], @options)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 129)
  def _reduce_73(val, _values)
    Anchor.new(:LEX_ANC_LINE_BEGIN,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_74(val, _values)
    Anchor.new(:LEX_ANC_LINE_END,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 131)
  def _reduce_75(val, _values)
    Anchor.new(:LEX_ANC_WORD_BOUND,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 132)
  def _reduce_76(val, _values)
    Anchor.new(:LEX_ANC_WORD_UNBOUND, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 133)
  def _reduce_77(val, _values)
    Anchor.new(:LEX_ANC_STRING_BEGIN, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 134)
  def _reduce_78(val, _values)
    Anchor.new(:LEX_ANC_STRING_END,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 135)
  def _reduce_79(val, _values)
    Anchor.new(:LEX_ANC_STRING_END2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 136)
  def _reduce_80(val, _values)
    Anchor.new(:LEX_ANC_LOOK_BEHIND2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 137)
  def _reduce_81(val, _values)
    Anchor.new(:LEX_ANC_MATCH_START, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 138)
  def _reduce_82(val, _values)
    TLetter.new(:LEX_SPECIAL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_83(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 140)
  def _reduce_84(val, _values)
    TLetter.new(:LEX_AND_AND,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 141)
  def _reduce_85(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 142)
  def _reduce_86(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 143)
  def _reduce_87(val, _values)
    TLetter.new(:LEX_SIMPLE_ESCAPE,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 144)
  def _reduce_88(val, _values)
    TLetter.new(:LEX_ANY_LETTER,     val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_89(val, _values)
    TEmpty.new
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_none(val, _values)
  val[0]
end

end   # class RegtestFrontParser
