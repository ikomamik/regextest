#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

# parser classes
require 'regtest/front/scanner'        # scanner class (for splitting the string)
require 'regtest/front/empty'          # parser class for empty part ("", (|) etc.)
require 'regtest/front/letter'         # parser class for a letter
require 'regtest/front/range'          # parser class for a range of letters
require 'regtest/front/selectable'     # parser class for a selectable element
require 'regtest/front/parenthesis'    # parser class for a parenthesis
require 'regtest/front/manage-parentheses'   # management class of parentheses
require 'regtest/front/repeatable'     # parser class for a repeatable elements
require 'regtest/front/sequence'       # parser class for a sequence of elements
require 'regtest/front/bracket'        # parser class for a character class (bracket)
require 'regtest/front/anchor'         # parser class for a anchor
require 'regtest/front/back-refer'     # parser class for a back reference
require 'regtest/front/bracket-parser' # bracket parser
require 'regtest/regex-option'         # option of the regular expression

class RegtestFrontParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 197)
# modules for sharing procedures with bracket parser
include Regtest::Front::Empty
include Regtest::Front::Letter
include Regtest::Front::Range
include Regtest::Front::Selectable
include Regtest::Front::Parenthesis
include Regtest::Front::Repeatable
include Regtest::Front::Sequence
include Regtest::Front::Bracket
include Regtest::Front::Anchor
include Regtest::Front::BackRefer
include Regtest::Front::ManageParentheses

# execute to parse
def parse(str, options)
  @options = options
  
  # scanning the string
  scanner = Regtest::Front::Scanner.new(options)
  @q = scanner.scan(str)
  
  # initialize management class of parentheses
  @options[:parens] = Parens.new()

  # bracket parser (class name is strange because of racc's restriction)
  @bracket_parser = RegtestFrontBracketParser.new
  
  # delete comments (since it is complecated to handle comments)
  @q = @q.delete_if{|token| token[0] == :LEX_COMMENT}
  
  # if extended option specified, delete spaces from string
  #if( @options[:reg_options].is_extended? )
  #  @q = @q.delete_if{|token| (token[0] == :LEX_EXTENDED_COMMENT || token[0] == :LEX_SPACE)}
  #end

  # execute to parse
  begin
    parse_result = do_parse
  rescue Racc::ParseError => ex
    raise ex.message
  end
  
  # sort parentheses (since number of parenthesis is offset-order other than parsing-order)
  @options[:parens].sort
  
  parse_result
end

# parse next token
def next_token
  @q.shift
end

# error handling routine. commented out because of readibility problem
#def on_error(t, val, vstack)
#  if val
#    raise "Parse error. offset=#{val[1]}, letter=#{val[0]}, stack=#{vstack}"
#  else
#    raise "Parse error. t=#{t}, val=#{val}, vstack=#{vstack}"
#  end
#end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,    41,     8,    44,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
     4,    92,     8,    85,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
     4,    44,     8,    89,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    48,    41,    52,    40,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    80,    81,    83,    79,    82,
     4,    92,     8,   nil,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
    48,   nil,    52,   nil,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    80,    81,    83,    79,    82,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
    48,   nil,    52,   nil,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    80,    81,    83,    79,    82,    48,   nil,    52,   nil,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    80,    81,    83,    79,    82,
     4,   nil,     8,   nil,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
   131,   130,   126,   129,   127,   128,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   125,    97,   124,   131,   130,   126,   129,   127,
   128,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   125,    97,   124,
    52,   nil,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    80,    81,
    83,    79,    82,     8,   nil,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,     8,   nil,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    52,
   nil,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    80,    81,    83,
    79,    82,     8,   nil,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    52,   nil,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    80,    81,    83,    79,    82,    89,    41,
    41,    88,   132,   136,    89,    41,    89,   135,    87,   134 ]

racc_action_check = [
     0,    43,     0,    42,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
     4,    90,     4,    40,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
     8,     5,     8,    91,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     9,     2,     9,     1,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
    10,    49,    10,   nil,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
    48,   nil,    48,   nil,    48,    48,    48,    48,    48,    48,
    48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
    48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
    48,    48,    48,    48,    48,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
    52,   nil,    52,   nil,    52,    52,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    53,   nil,    53,   nil,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    54,   nil,    54,   nil,    54,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    54,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
   113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
   104,   104,   104,   104,   104,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
   106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
   106,   106,   106,   106,   106,   106,   106,   106,   106,   106,
   106,   106,   106,   106,   106,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
   108,   108,   108,   108,   108,   108,   108,   108,   108,   108,
   108,   108,   108,   108,   108,   108,   108,   108,   108,   108,
   108,   108,   108,   108,   108,   108,   108,   108,   108,   108,
   108,   108,   108,   108,   108,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   133,   nil,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,     3,   nil,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,    41,   nil,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    47,
   nil,    47,    47,    47,    47,    47,    47,    47,    47,    47,
    47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
    47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
    47,    47,    86,   nil,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    86,    89,   nil,    89,    89,    89,
    89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    89,    89,    89,    89,    89,    89,    46,    84,
    95,    46,    84,    95,    94,    45,    93,    94,    45,    93 ]

racc_action_pointer = [
    -2,   248,   244,  1569,   138,   208,   nil,   nil,   208,   243,
   278,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   143,  1602,     0,    -1,   nil,  1743,  1736,  1635,   558,   278,
   nil,   nil,   628,   663,   698,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   733,  1737,   nil,  1668,   nil,   nil,  1701,
   138,   211,   nil,  1744,  1742,  1738,   nil,   nil,  1048,  1083,
  1118,  1153,  1188,  1223,  1258,  1293,  1328,  1363,  1398,  1433,
  1468,   873,  1013,   978,   943,   908,  1503,   838,   803,   768,
   593,   523,   488,   453,   418,   383,   348,   313,   173,   103,
    68,    33,   nil,  1536,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil ]

racc_action_default = [
    -2,  -121,    -1,    -3,    -2,    -7,    -9,   -11,    -2,   -44,
    -2,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,   -23,
   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,   -32,   -33,
   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,
  -121,    -5,    -8,    -6,   -10,  -121,  -121,   -45,   -44,   -49,
   -51,   -53,   -44,   -44,    -2,   -57,   -58,   -59,   -60,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,  -121,  -121,   171,    -4,   -12,   -13,   -47,
   -50,   -48,   -52,  -121,  -121,  -121,   -85,   -86,  -121,  -121,
  -121,  -121,  -121,  -121,  -121,  -121,  -121,  -121,  -121,  -121,
  -121,  -121,  -121,  -121,  -121,  -121,  -121,  -121,  -121,  -121,
  -121,  -121,  -121,  -121,  -121,  -121,  -121,  -121,  -121,  -121,
  -121,  -121,   -14,   -46,   -54,   -55,   -56,   -87,   -88,   -89,
   -90,   -91,   -92,   -93,   -94,   -95,   -96,   -97,   -98,   -99,
  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -107,  -108,  -109,
  -110,  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,
  -120 ]

racc_goto_table = [
    90,    42,     2,    96,   133,    86,    43,     1,   nil,   nil,
    45,   nil,    84,   nil,    46,   nil,   nil,   nil,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   nil,    91,   nil,   nil,    95,    93,    94,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    42,   nil,    90 ]

racc_goto_check = [
     9,     4,     2,    12,     8,     3,     2,     1,   nil,   nil,
     2,   nil,     2,   nil,     7,   nil,   nil,   nil,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,   nil,     7,   nil,   nil,     2,     7,     7,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,     9 ]

racc_goto_pointer = [
   nil,     7,     2,   -36,    -2,   nil,   nil,     5,   -85,   -47,
   nil,   nil,   -80 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     5,     6,     7,   nil,    47,    49,
    50,    51,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 38, :_reduce_none,
  0, 39, :_reduce_2,
  1, 39, :_reduce_3,
  3, 39, :_reduce_4,
  2, 39, :_reduce_5,
  2, 39, :_reduce_6,
  1, 40, :_reduce_7,
  2, 40, :_reduce_8,
  1, 41, :_reduce_9,
  2, 41, :_reduce_10,
  1, 42, :_reduce_11,
  3, 42, :_reduce_12,
  3, 42, :_reduce_13,
  3, 42, :_reduce_14,
  1, 43, :_reduce_15,
  1, 43, :_reduce_16,
  1, 43, :_reduce_17,
  1, 43, :_reduce_18,
  1, 43, :_reduce_19,
  1, 43, :_reduce_20,
  1, 43, :_reduce_21,
  1, 43, :_reduce_22,
  1, 43, :_reduce_23,
  1, 43, :_reduce_24,
  1, 43, :_reduce_25,
  1, 43, :_reduce_26,
  1, 43, :_reduce_27,
  1, 43, :_reduce_28,
  1, 43, :_reduce_29,
  1, 43, :_reduce_30,
  1, 43, :_reduce_31,
  1, 43, :_reduce_32,
  1, 43, :_reduce_33,
  1, 43, :_reduce_34,
  1, 43, :_reduce_35,
  1, 43, :_reduce_36,
  1, 43, :_reduce_37,
  1, 43, :_reduce_38,
  1, 43, :_reduce_39,
  1, 43, :_reduce_40,
  1, 43, :_reduce_41,
  1, 43, :_reduce_42,
  1, 43, :_reduce_43,
  0, 44, :_reduce_44,
  1, 44, :_reduce_45,
  3, 44, :_reduce_46,
  2, 44, :_reduce_47,
  2, 44, :_reduce_48,
  1, 45, :_reduce_49,
  2, 45, :_reduce_50,
  1, 46, :_reduce_51,
  2, 46, :_reduce_52,
  1, 47, :_reduce_53,
  3, 47, :_reduce_54,
  3, 47, :_reduce_55,
  3, 47, :_reduce_56,
  1, 48, :_reduce_57,
  1, 48, :_reduce_58,
  1, 48, :_reduce_59,
  1, 48, :_reduce_60,
  1, 48, :_reduce_61,
  1, 48, :_reduce_62,
  1, 48, :_reduce_63,
  1, 48, :_reduce_64,
  1, 48, :_reduce_65,
  1, 48, :_reduce_66,
  1, 48, :_reduce_67,
  1, 48, :_reduce_68,
  1, 48, :_reduce_69,
  1, 48, :_reduce_70,
  1, 48, :_reduce_71,
  1, 48, :_reduce_72,
  1, 48, :_reduce_73,
  1, 48, :_reduce_74,
  1, 48, :_reduce_75,
  1, 48, :_reduce_76,
  1, 48, :_reduce_77,
  1, 48, :_reduce_78,
  1, 48, :_reduce_79,
  1, 48, :_reduce_80,
  1, 48, :_reduce_81,
  1, 48, :_reduce_82,
  1, 48, :_reduce_83,
  1, 48, :_reduce_84,
  2, 48, :_reduce_85,
  1, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none,
  2, 49, :_reduce_none ]

racc_reduce_n = 121

racc_shift_n = 171

racc_token_table = {
  false => 0,
  :error => 1,
  :LEX_OR => 2,
  :LEX_QUANTIFIER => 3,
  :LEX_PAREN_START => 4,
  :LEX_PAREN_END => 5,
  :LEX_PAREN_START_EX1 => 6,
  :LEX_PAREN_START_EX2 => 7,
  :LEX_CHAR => 8,
  :LEX_BACK_REFER => 9,
  :LEX_CODE_LITERAL => 10,
  :LEX_NAMED_REFER => 11,
  :LEX_NAMED_GENERATE => 12,
  :LEX_CONTROL_LETTER => 13,
  :LEX_META_LETTER => 14,
  :LEX_ESCAPED_LETTER => 15,
  :LEX_UNICODE => 16,
  :LEX_SIMPLIFIED_CLASS => 17,
  :LEX_UNICODE_CLASS => 18,
  :LEX_BRACKET => 19,
  :LEX_ANC_LINE_BEGIN => 20,
  :LEX_ANC_LINE_END => 21,
  :LEX_ANC_WORD_BOUND => 22,
  :LEX_ANC_WORD_UNBOUND => 23,
  :LEX_ANC_STRING_BEGIN => 24,
  :LEX_ANC_STRING_END => 25,
  :LEX_ANC_STRING_END2 => 26,
  :LEX_ANC_LOOK_BEHIND2 => 27,
  :LEX_ANC_MATCH_START => 28,
  :LEX_SPECIAL_LETTER => 29,
  :LEX_MINUS => 30,
  :LEX_AND_AND => 31,
  :LEX_SPACE => 32,
  :LEX_SIMPLE_ESCAPE => 33,
  :LEX_SHARP => 34,
  :LEX_NEW_LINE => 35,
  :LEX_ANY_LETTER => 36 }

racc_nt_base = 37

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LEX_OR",
  "LEX_QUANTIFIER",
  "LEX_PAREN_START",
  "LEX_PAREN_END",
  "LEX_PAREN_START_EX1",
  "LEX_PAREN_START_EX2",
  "LEX_CHAR",
  "LEX_BACK_REFER",
  "LEX_CODE_LITERAL",
  "LEX_NAMED_REFER",
  "LEX_NAMED_GENERATE",
  "LEX_CONTROL_LETTER",
  "LEX_META_LETTER",
  "LEX_ESCAPED_LETTER",
  "LEX_UNICODE",
  "LEX_SIMPLIFIED_CLASS",
  "LEX_UNICODE_CLASS",
  "LEX_BRACKET",
  "LEX_ANC_LINE_BEGIN",
  "LEX_ANC_LINE_END",
  "LEX_ANC_WORD_BOUND",
  "LEX_ANC_WORD_UNBOUND",
  "LEX_ANC_STRING_BEGIN",
  "LEX_ANC_STRING_END",
  "LEX_ANC_STRING_END2",
  "LEX_ANC_LOOK_BEHIND2",
  "LEX_ANC_MATCH_START",
  "LEX_SPECIAL_LETTER",
  "LEX_MINUS",
  "LEX_AND_AND",
  "LEX_SPACE",
  "LEX_SIMPLE_ESCAPE",
  "LEX_SHARP",
  "LEX_NEW_LINE",
  "LEX_ANY_LETTER",
  "$start",
  "reg_exp",
  "reg_sel",
  "reg_seq",
  "reg_rep",
  "reg_elm",
  "reg_let",
  "reg_sel_ex",
  "reg_seq_ex",
  "reg_rep_ex",
  "reg_elm_ex",
  "reg_let_ex",
  "reg_comment_ex" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_2(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_3(val, _values)
    Selectable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_4(val, _values)
    val[0].add(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_5(val, _values)
    val[0].add(TEmpty.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_6(val, _values)
    sel = Selectable.new(TEmpty.new); sel.add(val[1]); sel
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_7(val, _values)
    Sequence.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_8(val, _values)
    val[0].add(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_9(val, _values)
    Repeatable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_10(val, _values)
    val[0].set_quant(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_11(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_12(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_13(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_14(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_15(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_16(val, _values)
    BackRefer.new(:LEX_BACK_REFER,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_17(val, _values)
    TLetter.new(:LEX_CODE_LITERAL,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_18(val, _values)
    BackRefer.new(:LEX_NAMED_REFER,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_19(val, _values)
    BackRefer.new(:LEX_NAMED_GENERATE, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_20(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_21(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_22(val, _values)
    TLetter.new(:LEX_ESCAPED_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_23(val, _values)
    TLetter.new(:LEX_UNICODE,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_24(val, _values)
    TLetter.new(:LEX_SIMPLIFIED_CLASS, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_25(val, _values)
    TLetter.new(:LEX_UNICODE_CLASS,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_26(val, _values)
    @bracket_parser.parse(val[0], @options)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_27(val, _values)
    Anchor.new(:LEX_ANC_LINE_BEGIN,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_28(val, _values)
    Anchor.new(:LEX_ANC_LINE_END,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_29(val, _values)
    Anchor.new(:LEX_ANC_WORD_BOUND,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_30(val, _values)
    Anchor.new(:LEX_ANC_WORD_UNBOUND, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_31(val, _values)
    Anchor.new(:LEX_ANC_STRING_BEGIN, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_32(val, _values)
    Anchor.new(:LEX_ANC_STRING_END,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_33(val, _values)
    Anchor.new(:LEX_ANC_STRING_END2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_34(val, _values)
    Anchor.new(:LEX_ANC_LOOK_BEHIND2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_35(val, _values)
    Anchor.new(:LEX_ANC_MATCH_START, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_36(val, _values)
    TLetter.new(:LEX_SPECIAL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_37(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_38(val, _values)
    TLetter.new(:LEX_AND_AND,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_39(val, _values)
    TLetter.new(:LEX_SPACE,          val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_40(val, _values)
    TLetter.new(:LEX_SIMPLE_ESCAPE,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_41(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_42(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_43(val, _values)
    TLetter.new(:LEX_ANY_LETTER,     val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 76)
  def _reduce_44(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_45(val, _values)
    Selectable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_46(val, _values)
    val[0].add(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_47(val, _values)
    val[0].add(TEmpty.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_48(val, _values)
    sel = Selectable.new(TEmpty.new); sel.add(val[1]); sel
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_49(val, _values)
    Sequence.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_50(val, _values)
    val[0].add(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_51(val, _values)
    Repeatable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_52(val, _values)
    val[0].set_quant(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_53(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_54(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_55(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 106)
  def _reduce_56(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_57(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_58(val, _values)
    BackRefer.new(:LEX_BACK_REFER,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 111)
  def _reduce_59(val, _values)
    TLetter.new(:LEX_CODE_LITERAL,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 112)
  def _reduce_60(val, _values)
    BackRefer.new(:LEX_NAMED_REFER,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 113)
  def _reduce_61(val, _values)
    BackRefer.new(:LEX_NAMED_GENERATE, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_62(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 115)
  def _reduce_63(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 116)
  def _reduce_64(val, _values)
    TLetter.new(:LEX_ESCAPED_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_65(val, _values)
    TLetter.new(:LEX_UNICODE,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_66(val, _values)
    TLetter.new(:LEX_SIMPLIFIED_CLASS, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 119)
  def _reduce_67(val, _values)
    TLetter.new(:LEX_UNICODE_CLASS,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_68(val, _values)
    @bracket_parser.parse(val[0], @options)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_69(val, _values)
    Anchor.new(:LEX_ANC_LINE_BEGIN,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 122)
  def _reduce_70(val, _values)
    Anchor.new(:LEX_ANC_LINE_END,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 123)
  def _reduce_71(val, _values)
    Anchor.new(:LEX_ANC_WORD_BOUND,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 124)
  def _reduce_72(val, _values)
    Anchor.new(:LEX_ANC_WORD_UNBOUND, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 125)
  def _reduce_73(val, _values)
    Anchor.new(:LEX_ANC_STRING_BEGIN, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_74(val, _values)
    Anchor.new(:LEX_ANC_STRING_END,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 127)
  def _reduce_75(val, _values)
    Anchor.new(:LEX_ANC_STRING_END2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 128)
  def _reduce_76(val, _values)
    Anchor.new(:LEX_ANC_LOOK_BEHIND2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 129)
  def _reduce_77(val, _values)
    Anchor.new(:LEX_ANC_MATCH_START, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_78(val, _values)
    TLetter.new(:LEX_SPECIAL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 131)
  def _reduce_79(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 132)
  def _reduce_80(val, _values)
    TLetter.new(:LEX_AND_AND,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 133)
  def _reduce_81(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 134)
  def _reduce_82(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 135)
  def _reduce_83(val, _values)
    TLetter.new(:LEX_SIMPLE_ESCAPE,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 136)
  def _reduce_84(val, _values)
    TLetter.new(:LEX_ANY_LETTER,     val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 137)
  def _reduce_85(val, _values)
    TEmpty.new
  end
.,.,

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_none(val, _values)
  val[0]
end

end   # class RegtestFrontParser
