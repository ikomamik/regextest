#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

# parser classes
require 'regtest/front/empty'          # parser class for empty part ("", (|) etc.)
require 'regtest/front/letter'         # parser class for a letter
require 'regtest/front/range'          # parser class for a range of letters
require 'regtest/front/selectable'     # parser class for a selectable element
require 'regtest/front/parenthesis'    # parser class for a parenthesis
require 'regtest/front/repeatable'     # parser class for a repeatable elements
require 'regtest/front/sequence'       # parser class for a sequence of elements
require 'regtest/front/bracket'        # parser class for a character class (bracket)
require 'regtest/front/anchor'         # parser class for a anchor
require 'regtest/front/back-refer'     # parser class for a back reference
require 'regtest/front/bracket-parser' # bracket parser

class RegtestFrontParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 218)
# modules for sharing procedures with bracket parser
include Regtest::Front::Empty
include Regtest::Front::Letter
include Regtest::Front::Range
include Regtest::Front::Selectable
include Regtest::Front::Parenthesis
include Regtest::Front::Repeatable
include Regtest::Front::Sequence
include Regtest::Front::Bracket
include Regtest::Front::Anchor
include Regtest::Front::BackRefer

# execute to parse
def parse(lex_words, options)
  @options = options
  
  # scanned lexical words
  @q = lex_words
  
  # bracket parser (class name is strange because of racc's restriction)
  @bracket_parser = RegtestFrontBracketParser.new
  
  # delete comments (since it is complecated to handle comments)
  @q = @q.delete_if{|token| token[0] == :LEX_COMMENT}
  
  # execute to parse
  begin
    parse_result = do_parse
  rescue Racc::ParseError => ex
    raise ex.message
  end
  
  parse_result
end

# parse next token
def next_token
  @q.shift
end

# error handling routine. commented out because of readibility problem
#def on_error(t, val, vstack)
#  if val
#    raise "Parse error. offset=#{val[1]}, letter=#{val[0]}, stack=#{vstack}"
#  else
#    raise "Parse error. t=#{t}, val=#{val}, vstack=#{vstack}"
#  end
#end
...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'4,6,7,48,10,93,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28',
'29,30,31,32,33,34,35,36,37,38,39,40,41,141,43,42,140,136,139,137,138',
'108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124',
'125,126,127,128,129,130,131,132,133,135,107,134,141,100,144,140,136',
'139,137,138,108,109,110,111,112,113,114,115,116,117,118,119,120,121',
'122,123,124,125,126,127,128,129,130,131,132,133,135,107,134,141,100',
'48,140,136,139,137,138,108,109,110,111,112,113,114,115,116,117,118,119',
'120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,107,134',
'4,6,7,43,10,,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29',
'30,31,32,33,34,35,36,37,38,39,40,41,141,,,140,136,139,137,138,108,109',
'110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126',
'127,128,129,130,131,132,133,135,107,134,141,,,140,136,139,137,138,108',
'109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125',
'126,127,128,129,130,131,132,133,135,107,134,141,,,140,136,139,137,138',
'108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124',
'125,126,127,128,129,130,131,132,133,135,107,134,4,6,7,,10,,11,12,13',
'14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36',
'37,38,39,40,41,91,51,52,,55,,56,57,58,59,60,61,62,63,64,65,66,67,68',
'69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,86,82,85,4,6,7,,10,,11',
'12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34',
'35,36,37,38,39,40,41,141,,,140,136,139,137,138,108,109,110,111,112,113',
'114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130',
'131,132,133,135,107,134,141,,,140,136,139,137,138,108,109,110,111,112',
'113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129',
'130,131,132,133,135,107,134,141,,,140,136,139,137,138,108,109,110,111',
'112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128',
'129,130,131,132,133,135,107,134,141,,,140,136,139,137,138,108,109,110',
'111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127',
'128,129,130,131,132,133,135,107,134,141,,,140,136,139,137,138,108,109',
'110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126',
'127,128,129,130,131,132,133,135,107,134,141,,,140,136,139,137,138,108',
'109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125',
'126,127,128,129,130,131,132,133,135,107,134,141,,,140,136,139,137,138',
'108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124',
'125,126,127,128,129,130,131,132,133,135,107,134,141,,,140,136,139,137',
'138,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123',
'124,125,126,127,128,129,130,131,132,133,135,107,134,141,,,140,136,139',
'137,138,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122',
'123,124,125,126,127,128,129,130,131,132,133,135,107,134,141,,,140,136',
'139,137,138,108,109,110,111,112,113,114,115,116,117,118,119,120,121',
'122,123,124,125,126,127,128,129,130,131,132,133,135,107,134,91,51,52',
',55,,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76',
'77,78,79,80,81,83,84,86,82,85,91,51,52,,55,,56,57,58,59,60,61,62,63',
'64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,86,82,85',
'4,6,7,,10,,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29',
'30,31,32,33,34,35,36,37,38,39,40,41,141,,,140,136,139,137,138,108,109',
'110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126',
'127,128,129,130,131,132,133,135,107,134,141,,,140,136,139,137,138,108',
'109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125',
'126,127,128,129,130,131,132,133,135,107,134,141,,,140,136,139,137,138',
'108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124',
'125,126,127,128,129,130,131,132,133,135,107,134,141,,,140,136,139,137',
'138,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123',
'124,125,126,127,128,129,130,131,132,133,135,107,134,141,,,140,136,139',
'137,138,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122',
'123,124,125,126,127,128,129,130,131,132,133,135,107,134,91,51,52,,55',
',56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78',
'79,80,81,83,84,86,82,85,141,,,140,136,139,137,138,108,109,110,111,112',
'113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129',
'130,131,132,133,135,107,134,141,,,140,136,139,137,138,108,109,110,111',
'112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128',
'129,130,131,132,133,135,107,134,141,,,140,136,139,137,138,108,109,110',
'111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127',
'128,129,130,131,132,133,135,107,134,141,,,140,136,139,137,138,108,109',
'110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126',
'127,128,129,130,131,132,133,135,107,134,141,,,140,136,139,137,138,108',
'109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125',
'126,127,128,129,130,131,132,133,135,107,134,141,,,140,136,139,137,138',
'108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124',
'125,126,127,128,129,130,131,132,133,135,107,134,141,,,140,136,139,137',
'138,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123',
'124,125,126,127,128,129,130,131,132,133,135,107,134,141,,,140,136,139',
'137,138,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122',
'123,124,125,126,127,128,129,130,131,132,133,135,107,134,141,,,140,136',
'139,137,138,108,109,110,111,112,113,114,115,116,117,118,119,120,121',
'122,123,124,125,126,127,128,129,130,131,132,133,135,107,134,141,,,140',
'136,139,137,138,108,109,110,111,112,113,114,115,116,117,118,119,120',
'121,122,123,124,125,126,127,128,129,130,131,132,133,135,107,134,141',
',,140,136,139,137,138,108,109,110,111,112,113,114,115,116,117,118,119',
'120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,107,134',
'141,,,140,136,139,137,138,108,109,110,111,112,113,114,115,116,117,118',
'119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,107',
'134,141,,,140,136,139,137,138,108,109,110,111,112,113,114,115,116,117',
'118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135',
'107,134,141,,,140,136,139,137,138,108,109,110,111,112,113,114,115,116',
'117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133',
'135,107,134,6,7,,10,,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26',
'27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,98,99,,55,,56,57,58,59',
'60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83',
'84,86,82,85,45,46,,10,,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25',
'26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,46,,10,,11,12,13',
'14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36',
'37,38,39,40,41,98,99,,55,,56,57,58,59,60,61,62,63,64,65,66,67,68,69',
'70,71,72,73,74,75,76,77,78,79,80,81,83,84,86,82,85,6,7,,10,,11,12,13',
'14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36',
'37,38,39,40,41,51,52,,55,,56,57,58,59,60,61,62,63,64,65,66,67,68,69',
'70,71,72,73,74,75,76,77,78,79,80,81,83,84,86,82,85,98,99,,55,,56,57',
'58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80',
'81,83,84,86,82,85,45,46,,10,,11,12,13,14,15,16,17,18,19,20,21,22,23',
'24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,98,99,,55,,56',
'57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79',
'80,81,83,84,86,82,85,45,46,,10,,11,12,13,14,15,16,17,18,19,20,21,22',
'23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,51,52,,55,',
'56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78',
'79,80,81,83,84,86,82,85,98,99,,55,,56,57,58,59,60,61,62,63,64,65,66',
'67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,86,82,85,45,46,,10',
',11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33',
'34,35,36,37,38,39,40,41,51,52,,55,,56,57,58,59,60,61,62,63,64,65,66',
'67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,86,82,85,45,46,,10',
',11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33',
'34,35,36,37,38,39,40,41,6,7,,10,,11,12,13,14,15,16,17,18,19,20,21,22',
'23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,51,52,,55,',
'56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78',
'79,80,81,83,84,86,82,85,6,7,,10,,11,12,13,14,15,16,17,18,19,20,21,22',
'23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,6,7,,10,,11',
'12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34',
'35,36,37,38,39,40,41,51,52,,55,,56,57,58,59,60,61,62,63,64,65,66,67',
'68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,86,82,85,98,99,,55,',
'56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78',
'79,80,81,83,84,86,82,85,144,144,43,43,43,150,149,146,142,151,144,,,',
',143' ]
        racc_action_table = arr = ::Array.new(2436, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,0,5,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0',
'0,0,0,141,2,1,141,141,141,141,141,141,141,141,141,141,141,141,141,141',
'141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141',
'141,141,141,140,50,145,140,140,140,140,140,140,140,140,140,140,140,140',
'140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140',
'140,140,140,140,140,139,97,44,139,139,139,139,139,139,139,139,139,139',
'139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139',
'139,139,139,139,139,139,139,4,4,4,47,4,,4,4,4,4,4,4,4,4,4,4,4,4,4,4',
'4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,138,,,138,138,138,138,138,138,138',
'138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138',
'138,138,138,138,138,138,138,138,138,138,137,,,137,137,137,137,137,137',
'137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137',
'137,137,137,137,137,137,137,137,137,137,137,136,,,136,136,136,136,136',
'136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136',
'136,136,136,136,136,136,136,136,136,136,136,136,10,10,10,,10,,10,10',
'10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10',
'10,10,10,10,10,10,11,11,11,,11,,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,,12',
',12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,135,,,135,135,135,135,135,135,135,135,135,135',
'135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135',
'135,135,135,135,135,135,135,134,,,134,134,134,134,134,134,134,134,134',
'134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134',
'134,134,134,134,134,134,134,134,133,,,133,133,133,133,133,133,133,133',
'133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133',
'133,133,133,133,133,133,133,133,133,132,,,132,132,132,132,132,132,132',
'132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132',
'132,132,132,132,132,132,132,132,132,132,131,,,131,131,131,131,131,131',
'131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131',
'131,131,131,131,131,131,131,131,131,131,131,130,,,130,130,130,130,130',
'130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130',
'130,130,130,130,130,130,130,130,130,130,130,130,129,,,129,129,129,129',
'129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129',
'129,129,129,129,129,129,129,129,129,129,129,129,129,128,,,128,128,128',
'128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128',
'128,128,128,128,128,128,128,128,128,128,128,128,128,128,127,,,127,127',
'127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127',
'127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,126,,,126',
'126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126',
'126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,55,55',
'55,,55,,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55',
'55,55,55,55,55,55,55,55,55,55,55,56,56,56,,56,,56,56,56,56,56,56,56',
'56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56',
'56,57,57,57,,57,,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57',
'57,57,57,57,57,57,57,57,57,57,57,57,57,57,86,,,86,86,86,86,86,86,86',
'86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86',
'86,86,86,86,125,,,125,125,125,125,125,125,125,125,125,125,125,125,125',
'125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125',
'125,125,125,125,124,,,124,124,124,124,124,124,124,124,124,124,124,124',
'124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124',
'124,124,124,124,124,123,,,123,123,123,123,123,123,123,123,123,123,123',
'123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123',
'123,123,123,123,123,123,122,,,122,122,122,122,122,122,122,122,122,122',
'122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122',
'122,122,122,122,122,122,122,91,91,91,,91,,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,121',
',,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121',
'121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121',
'120,,,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120',
'120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120',
'120,119,,,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119',
'119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119',
'119,119,118,,,118,118,118,118,118,118,118,118,118,118,118,118,118,118',
'118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118',
'118,118,118,117,,,117,117,117,117,117,117,117,117,117,117,117,117,117',
'117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117',
'117,117,117,117,116,,,116,116,116,116,116,116,116,116,116,116,116,116',
'116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116',
'116,116,116,116,116,115,,,115,115,115,115,115,115,115,115,115,115,115',
'115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115',
'115,115,115,115,115,115,114,,,114,114,114,114,114,114,114,114,114,114',
'114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114',
'114,114,114,114,114,114,114,113,,,113,113,113,113,113,113,113,113,113',
'113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113',
'113,113,113,113,113,113,113,113,112,,,112,112,112,112,112,112,112,112',
'112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112',
'112,112,112,112,112,112,112,112,112,111,,,111,111,111,111,111,111,111',
'111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111',
'111,111,111,111,111,111,111,111,111,111,110,,,110,110,110,110,110,110',
'110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110',
'110,110,110,110,110,110,110,110,110,110,110,108,,,108,108,108,108,108',
'108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108',
'108,108,108,108,108,108,108,108,108,108,108,108,109,,,109,109,109,109',
'109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109',
'109,109,109,109,109,109,109,109,109,109,109,109,109,52,52,,52,,52,52',
'52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52',
'52,52,52,52,52,52,186,186,,186,,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,148,148,,148,,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,102,102,,102,,102,102,102,102,102,102,102,102,102',
'102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102',
'102,102,102,102,102,101,101,,101,,101,101,101,101,101,101,101,101,101',
'101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101',
'101,101,101,101,101,99,99,,99,,99,99,99,99,99,99,99,99,99,99,99,99,99',
'99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,98,98,,98,,98',
'98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98',
'98,98,98,98,98,98,98,147,147,,147,,147,147,147,147,147,147,147,147,147',
'147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147',
'147,147,147,147,147,96,96,,96,,96,96,96,96,96,96,96,96,96,96,96,96,96',
'96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,95,95,,95,,95',
'95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95',
'95,95,95,95,95,95,95,94,94,,94,,94,94,94,94,94,94,94,94,94,94,94,94',
'94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,144,144,,144',
',144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144',
'144,144,144,144,144,144,144,144,144,144,144,144,144,144,90,90,,90,,90',
'90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90',
'90,90,90,90,90,90,90,3,3,,3,,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3',
'3,3,3,3,3,3,3,3,3,3,3,6,6,,6,,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6',
'6,6,6,6,6,6,6,6,6,6,6,6,87,87,,87,,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,7,7,,7,',
'7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,51,51',
',51,,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51',
'51,51,51,51,51,51,51,51,51,51,43,43,,43,,43,43,43,43,43,43,43,43,43',
'43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,46',
'46,,46,,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46',
'46,46,46,46,46,46,46,46,46,46,46,45,45,,45,,45,45,45,45,45,45,45,45',
'45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45',
'49,49,,49,,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49',
'49,49,49,49,49,49,49,49,49,49,49,49,104,103,92,88,105,104,103,92,88',
'105,89,,,,,89' ]
        racc_action_check = arr = ::Array.new(2436, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    39,    36,  2093,   146,    -2,  2129,  2201,   nil,   nil,
   294,   331,   368,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     5,  2273,   108,  2345,  2309,   149,   nil,  2381,
    70,  2237,  1625,   nil,   nil,   775,   812,   849,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   886,  2165,  2421,  2428,
  2057,  1071,  2420,   nil,  1985,  1949,  1913,   107,  1841,  1805,
   nil,  1769,  1733,  2419,  2418,  2422,   nil,   nil,  1552,  1589,
  1515,  1478,  1441,  1404,  1367,  1330,  1293,  1256,  1219,  1182,
  1145,  1108,  1034,   997,   960,   923,   738,   701,   664,   627,
   590,   553,   516,   479,   442,   405,   257,   220,   183,   109,
    72,    35,   nil,   nil,  2021,    74,   nil,  1877,  1697,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1661 ]

racc_action_default = [
    -2,  -133,    -1,    -3,    -2,    -7,   -13,   -14,   -15,   -17,
    -2,   -50,    -2,   -21,   -22,   -23,   -24,   -25,   -26,   -27,
   -28,   -29,   -30,   -31,   -32,   -33,   -34,   -35,   -36,   -37,
   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,   -47,
   -48,   -49,  -133,    -5,    -8,  -133,  -133,    -6,   -16,    -9,
   -55,   -61,   -62,   -63,   -65,   -50,   -50,    -2,   -69,   -70,
   -71,   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,
   -81,   -82,   -83,   -84,   -85,   -86,   -87,   -88,   -89,   -90,
   -91,   -92,   -93,   -94,   -95,   -96,  -133,   -11,  -133,  -133,
   -51,   -50,  -133,   187,    -4,   -10,   -12,   -56,  -133,  -133,
   -64,   -57,   -59,  -133,  -133,  -133,   -97,   -98,  -133,  -133,
  -133,  -133,  -133,  -133,  -133,  -133,  -133,  -133,  -133,  -133,
  -133,  -133,  -133,  -133,  -133,  -133,  -133,  -133,  -133,  -133,
  -133,  -133,  -133,  -133,  -133,  -133,  -133,  -133,  -133,  -133,
  -133,  -133,   -18,   -19,   -53,   -54,   -20,   -58,   -60,   -66,
   -67,   -68,   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,
  -107,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,   -52 ]

racc_goto_table = [
    44,     2,    49,    87,    97,    47,     1,    89,   nil,   nil,
   nil,    88,   nil,    92,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    94,
   nil,    95,    96,   nil,   nil,    97,   nil,   101,   102,   nil,
    97,   103,   104,   nil,   nil,   nil,    97,   nil,   105,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   106,   nil,   nil,    44,   nil,   nil,   145,   nil,   nil,
   nil,    44,   nil,    44,   147,   148,   nil,   nil,   nil,    44,
   nil,   nil,    97,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   179,   180,   181,   182,   183,   184,   185,   nil,   nil,   nil,
   186,    97,   nil,   nil,   nil,    44 ]

racc_goto_check = [
     4,     2,     5,     3,     9,     2,     1,     8,   nil,   nil,
   nil,     2,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
   nil,     5,     3,   nil,   nil,     9,   nil,     5,     3,   nil,
     9,     8,     8,   nil,   nil,   nil,     9,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,   nil,     4,   nil,   nil,     8,   nil,   nil,
   nil,     4,   nil,     4,     5,     3,   nil,   nil,   nil,     4,
   nil,   nil,     9,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,   nil,   nil,   nil,
     5,     9,   nil,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     6,     1,    -4,    -3,    -4,   nil,   nil,    -4,   -45,
   nil,   nil,    -5 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     5,    90,     8,     9,   nil,    50,
    53,    54,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 40, :_reduce_none,
  0, 41, :_reduce_2,
  1, 41, :_reduce_3,
  3, 41, :_reduce_4,
  2, 41, :_reduce_5,
  2, 41, :_reduce_6,
  1, 42, :_reduce_7,
  2, 42, :_reduce_8,
  2, 42, :_reduce_9,
  3, 42, :_reduce_10,
  2, 42, :_reduce_11,
  3, 42, :_reduce_12,
  1, 42, :_reduce_13,
  1, 42, :_reduce_14,
  1, 43, :_reduce_15,
  2, 43, :_reduce_16,
  1, 45, :_reduce_17,
  3, 45, :_reduce_18,
  3, 45, :_reduce_19,
  3, 45, :_reduce_20,
  1, 46, :_reduce_21,
  1, 46, :_reduce_22,
  1, 46, :_reduce_23,
  1, 46, :_reduce_24,
  1, 46, :_reduce_25,
  1, 46, :_reduce_26,
  1, 46, :_reduce_27,
  1, 46, :_reduce_28,
  1, 46, :_reduce_29,
  1, 46, :_reduce_30,
  1, 46, :_reduce_31,
  1, 46, :_reduce_32,
  1, 46, :_reduce_33,
  1, 46, :_reduce_34,
  1, 46, :_reduce_35,
  1, 46, :_reduce_36,
  1, 46, :_reduce_37,
  1, 46, :_reduce_38,
  1, 46, :_reduce_39,
  1, 46, :_reduce_40,
  1, 46, :_reduce_41,
  1, 46, :_reduce_42,
  1, 46, :_reduce_43,
  1, 46, :_reduce_44,
  1, 46, :_reduce_45,
  1, 46, :_reduce_46,
  1, 46, :_reduce_47,
  1, 46, :_reduce_48,
  1, 46, :_reduce_49,
  0, 47, :_reduce_50,
  1, 47, :_reduce_51,
  3, 47, :_reduce_52,
  2, 47, :_reduce_53,
  2, 47, :_reduce_54,
  1, 44, :_reduce_55,
  2, 44, :_reduce_56,
  2, 44, :_reduce_57,
  3, 44, :_reduce_58,
  2, 44, :_reduce_59,
  3, 44, :_reduce_60,
  1, 44, :_reduce_61,
  1, 44, :_reduce_62,
  1, 48, :_reduce_63,
  2, 48, :_reduce_64,
  1, 49, :_reduce_65,
  3, 49, :_reduce_66,
  3, 49, :_reduce_67,
  3, 49, :_reduce_68,
  1, 50, :_reduce_69,
  1, 50, :_reduce_70,
  1, 50, :_reduce_71,
  1, 50, :_reduce_72,
  1, 50, :_reduce_73,
  1, 50, :_reduce_74,
  1, 50, :_reduce_75,
  1, 50, :_reduce_76,
  1, 50, :_reduce_77,
  1, 50, :_reduce_78,
  1, 50, :_reduce_79,
  1, 50, :_reduce_80,
  1, 50, :_reduce_81,
  1, 50, :_reduce_82,
  1, 50, :_reduce_83,
  1, 50, :_reduce_84,
  1, 50, :_reduce_85,
  1, 50, :_reduce_86,
  1, 50, :_reduce_87,
  1, 50, :_reduce_88,
  1, 50, :_reduce_89,
  1, 50, :_reduce_90,
  1, 50, :_reduce_91,
  1, 50, :_reduce_92,
  1, 50, :_reduce_93,
  1, 50, :_reduce_94,
  1, 50, :_reduce_95,
  1, 50, :_reduce_96,
  2, 50, :_reduce_97,
  1, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none,
  2, 51, :_reduce_none ]

racc_reduce_n = 133

racc_shift_n = 187

racc_token_table = {
  false => 0,
  :error => 1,
  :LEX_OR => 2,
  :LEX_OPTION_PAREN_1 => 3,
  :LEX_OPTION_PAREN_2 => 4,
  :LEX_QUANTIFIER => 5,
  :LEX_PAREN_START => 6,
  :LEX_PAREN_END => 7,
  :LEX_PAREN_START_EX1 => 8,
  :LEX_PAREN_START_EX2 => 9,
  :LEX_CHAR => 10,
  :LEX_BACK_REFER => 11,
  :LEX_CODE_LITERAL => 12,
  :LEX_NAMED_REFER => 13,
  :LEX_NAMED_GENERATE => 14,
  :LEX_CONTROL_LETTER => 15,
  :LEX_META_LETTER => 16,
  :LEX_ESCAPED_LETTER => 17,
  :LEX_UNICODE => 18,
  :LEX_SIMPLIFIED_CLASS => 19,
  :LEX_UNICODE_CLASS => 20,
  :LEX_BRACKET => 21,
  :LEX_ANC_LINE_BEGIN => 22,
  :LEX_ANC_LINE_END => 23,
  :LEX_ANC_WORD_BOUND => 24,
  :LEX_ANC_WORD_UNBOUND => 25,
  :LEX_ANC_STRING_BEGIN => 26,
  :LEX_ANC_STRING_END => 27,
  :LEX_ANC_STRING_END2 => 28,
  :LEX_ANC_LOOK_BEHIND2 => 29,
  :LEX_ANC_MATCH_START => 30,
  :LEX_SPECIAL_LETTER => 31,
  :LEX_MINUS => 32,
  :LEX_AND_AND => 33,
  :LEX_SPACE => 34,
  :LEX_SIMPLE_ESCAPE => 35,
  :LEX_SHARP => 36,
  :LEX_NEW_LINE => 37,
  :LEX_ANY_LETTER => 38 }

racc_nt_base = 39

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LEX_OR",
  "LEX_OPTION_PAREN_1",
  "LEX_OPTION_PAREN_2",
  "LEX_QUANTIFIER",
  "LEX_PAREN_START",
  "LEX_PAREN_END",
  "LEX_PAREN_START_EX1",
  "LEX_PAREN_START_EX2",
  "LEX_CHAR",
  "LEX_BACK_REFER",
  "LEX_CODE_LITERAL",
  "LEX_NAMED_REFER",
  "LEX_NAMED_GENERATE",
  "LEX_CONTROL_LETTER",
  "LEX_META_LETTER",
  "LEX_ESCAPED_LETTER",
  "LEX_UNICODE",
  "LEX_SIMPLIFIED_CLASS",
  "LEX_UNICODE_CLASS",
  "LEX_BRACKET",
  "LEX_ANC_LINE_BEGIN",
  "LEX_ANC_LINE_END",
  "LEX_ANC_WORD_BOUND",
  "LEX_ANC_WORD_UNBOUND",
  "LEX_ANC_STRING_BEGIN",
  "LEX_ANC_STRING_END",
  "LEX_ANC_STRING_END2",
  "LEX_ANC_LOOK_BEHIND2",
  "LEX_ANC_MATCH_START",
  "LEX_SPECIAL_LETTER",
  "LEX_MINUS",
  "LEX_AND_AND",
  "LEX_SPACE",
  "LEX_SIMPLE_ESCAPE",
  "LEX_SHARP",
  "LEX_NEW_LINE",
  "LEX_ANY_LETTER",
  "$start",
  "reg_exp",
  "reg_sel",
  "reg_seq",
  "reg_rep",
  "reg_seq_ex",
  "reg_elm",
  "reg_let",
  "reg_sel_ex",
  "reg_rep_ex",
  "reg_elm_ex",
  "reg_let_ex",
  "reg_comment_ex" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_2(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_3(val, _values)
    Selectable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_4(val, _values)
    val[0].add(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_5(val, _values)
    val[0].add(TEmpty.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_6(val, _values)
    Selectable.new(TEmpty.new).add(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_7(val, _values)
    Sequence.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_8(val, _values)
    val[0].add(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_9(val, _values)
    Sequence.new(Paren.new(val[0])).concatinate(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_10(val, _values)
    val[0].add(Paren.new(val[1])).concatinate(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_11(val, _values)
    Sequence.new(Paren.new(val[0])).concatinate(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_12(val, _values)
    val[0].add(Paren.new(val[1])).concatinate(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_13(val, _values)
    Sequence.new(Paren.new(val[0]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_14(val, _values)
    Sequence.new(Paren.new(val[0]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_15(val, _values)
    Repeatable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_16(val, _values)
    val[0].set_quant(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_17(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_18(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_19(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_20(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_21(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_22(val, _values)
    BackRefer.new(:LEX_BACK_REFER,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_23(val, _values)
    TLetter.new(:LEX_CODE_LITERAL,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_24(val, _values)
    BackRefer.new(:LEX_NAMED_REFER,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_25(val, _values)
    BackRefer.new(:LEX_NAMED_GENERATE, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_26(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_27(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_28(val, _values)
    TLetter.new(:LEX_ESCAPED_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_29(val, _values)
    TLetter.new(:LEX_UNICODE,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_30(val, _values)
    TLetter.new(:LEX_SIMPLIFIED_CLASS, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_31(val, _values)
    TLetter.new(:LEX_UNICODE_CLASS,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_32(val, _values)
    @bracket_parser.parse(val[0], @options)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_33(val, _values)
    Anchor.new(:LEX_ANC_LINE_BEGIN,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_34(val, _values)
    Anchor.new(:LEX_ANC_LINE_END,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_35(val, _values)
    Anchor.new(:LEX_ANC_WORD_BOUND,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_36(val, _values)
    Anchor.new(:LEX_ANC_WORD_UNBOUND, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_37(val, _values)
    Anchor.new(:LEX_ANC_STRING_BEGIN, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 72)
  def _reduce_38(val, _values)
    Anchor.new(:LEX_ANC_STRING_END,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_39(val, _values)
    Anchor.new(:LEX_ANC_STRING_END2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_40(val, _values)
    Anchor.new(:LEX_ANC_LOOK_BEHIND2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_41(val, _values)
    Anchor.new(:LEX_ANC_MATCH_START, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 76)
  def _reduce_42(val, _values)
    TLetter.new(:LEX_SPECIAL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_43(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_44(val, _values)
    TLetter.new(:LEX_AND_AND,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_45(val, _values)
    TLetter.new(:LEX_SPACE,          val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_46(val, _values)
    TLetter.new(:LEX_SIMPLE_ESCAPE,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_47(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_48(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_49(val, _values)
    TLetter.new(:LEX_ANY_LETTER,     val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_50(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_51(val, _values)
    Selectable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_52(val, _values)
    val[0].add(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_53(val, _values)
    val[0].add(TEmpty.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_54(val, _values)
    Selectable.new(TEmpty.new).add(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_55(val, _values)
    Sequence.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_56(val, _values)
    val[0].add(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_57(val, _values)
    Sequence.new(Paren.new(val[0])).concatinate(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 106)
  def _reduce_58(val, _values)
    val[0].add(Paren.new(val[1])).concatinate(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_59(val, _values)
    Sequence.new(Paren.new(val[0])).concatinate(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_60(val, _values)
    val[0].add(Paren.new(val[1])).concatinate(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 112)
  def _reduce_61(val, _values)
    Sequence.new(Paren.new(val[0]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_62(val, _values)
    Sequence.new(Paren.new(val[0]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_63(val, _values)
    Repeatable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_64(val, _values)
    val[0].set_quant(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 124)
  def _reduce_65(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_66(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 128)
  def _reduce_67(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_68(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 133)
  def _reduce_69(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 134)
  def _reduce_70(val, _values)
    BackRefer.new(:LEX_BACK_REFER,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 135)
  def _reduce_71(val, _values)
    TLetter.new(:LEX_CODE_LITERAL,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 136)
  def _reduce_72(val, _values)
    BackRefer.new(:LEX_NAMED_REFER,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 137)
  def _reduce_73(val, _values)
    BackRefer.new(:LEX_NAMED_GENERATE, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 138)
  def _reduce_74(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_75(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 140)
  def _reduce_76(val, _values)
    TLetter.new(:LEX_ESCAPED_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 141)
  def _reduce_77(val, _values)
    TLetter.new(:LEX_UNICODE,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 142)
  def _reduce_78(val, _values)
    TLetter.new(:LEX_SIMPLIFIED_CLASS, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 143)
  def _reduce_79(val, _values)
    TLetter.new(:LEX_UNICODE_CLASS,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 144)
  def _reduce_80(val, _values)
    @bracket_parser.parse(val[0], @options)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_81(val, _values)
    Anchor.new(:LEX_ANC_LINE_BEGIN,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_82(val, _values)
    Anchor.new(:LEX_ANC_LINE_END,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 147)
  def _reduce_83(val, _values)
    Anchor.new(:LEX_ANC_WORD_BOUND,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 148)
  def _reduce_84(val, _values)
    Anchor.new(:LEX_ANC_WORD_UNBOUND, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_85(val, _values)
    Anchor.new(:LEX_ANC_STRING_BEGIN, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 150)
  def _reduce_86(val, _values)
    Anchor.new(:LEX_ANC_STRING_END,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 151)
  def _reduce_87(val, _values)
    Anchor.new(:LEX_ANC_STRING_END2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 152)
  def _reduce_88(val, _values)
    Anchor.new(:LEX_ANC_LOOK_BEHIND2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_89(val, _values)
    Anchor.new(:LEX_ANC_MATCH_START, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_90(val, _values)
    TLetter.new(:LEX_SPECIAL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_91(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 156)
  def _reduce_92(val, _values)
    TLetter.new(:LEX_AND_AND,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_93(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_94(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_95(val, _values)
    TLetter.new(:LEX_SIMPLE_ESCAPE,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 160)
  def _reduce_96(val, _values)
    TLetter.new(:LEX_ANY_LETTER,     val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 161)
  def _reduce_97(val, _values)
    TEmpty.new
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

def _reduce_none(val, _values)
  val[0]
end

end   # class RegtestFrontParser
