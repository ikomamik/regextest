#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

# parser classes
require 'regtest/front/scanner'        # scanner class (for splitting the string)
require 'regtest/front/empty'          # parser class for empty part ("", (|) etc.)
require 'regtest/front/letter'         # parser class for a letter
require 'regtest/front/range'          # parser class for a range of letters
require 'regtest/front/selectable'     # parser class for a selectable element
require 'regtest/front/parenthesis'    # parser class for a parenthesis
require 'regtest/front/manage-parentheses'   # management class of parentheses
require 'regtest/front/repeatable'     # parser class for a repeatable elements
require 'regtest/front/sequence'       # parser class for a sequence of elements
require 'regtest/front/bracket'        # parser class for a character class (bracket)
require 'regtest/front/anchor'         # parser class for a anchor
require 'regtest/front/back-refer'     # parser class for a back reference
require 'regtest/front/bracket-parser' # bracket parser
require 'regtest/regex-option'         # option of the regular expression

class RegtestFrontParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 86)
# modules for sharing procedures with bracket parser
include Regtest::Front::Empty
include Regtest::Front::Letter
include Regtest::Front::Range
include Regtest::Front::Selectable
include Regtest::Front::Parenthesis
include Regtest::Front::Repeatable
include Regtest::Front::Sequence
include Regtest::Front::Bracket
include Regtest::Front::Anchor
include Regtest::Front::BackRefer
include Regtest::Front::ManageParentheses

# execute to parse
def parse(str, options)
  @options = options
  
  # scanning the string
  scanner = Regtest::Front::Scanner.new(options)
  @q = scanner.scan(str)
  
  # initialize management class of parentheses
  @options[:parens] = Parens.new()

  # bracket parser (class name is strange because of racc's restriction)
  @bracket_parser = RegtestFrontBracketParser.new
  
  # delete comments (since it is complecated to handle comments)
  @q = @q.delete_if{|token| token[0] == :LEX_COMMENT}
  
  # if extended option specified, delete spaces from string
  if( @options[:reg_options].is_extended? )
    @q = @q.delete_if{|token| (token[0] == :LEX_EXTENDED_COMMENT || token[0] == :LEX_SPACE)}
  end

  # execute to parse
  begin
    parse_result = do_parse
  rescue Racc::ParseError => ex
    raise ex.message
  end
  
  # sort parentheses (since number of parenthesis is offset-order other than parsing-order)
  @options[:parens].sort
  
  parse_result
end

# parse next token
def next_token
  @q.shift
end

# error handling routine. commented out because of readibility problem
#def on_error(t, val, vstack)
#  if val
#    raise "Parse error. offset=#{val[1]}, letter=#{val[0]}, stack=#{vstack}"
#  else
#    raise "Parse error. t=#{t}, val=#{val}, vstack=#{vstack}"
#  end
#end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,    38,     8,    38,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,     4,
    40,     8,    35,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,     4,    34,
     8,    35,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,     8,   nil,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,     8,   nil,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,     8,   nil,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    35,   nil,
   nil,    42 ]

racc_action_check = [
     0,    36,     0,     5,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
    34,     4,    37,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     8,     1,
     8,     2,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     3,   nil,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,    41,   nil,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    35,   nil,    35,    35,    35,    35,    35,    35,    35,
    35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
    35,    35,    35,    35,    35,    35,    35,    35,    39,   nil,
   nil,    39 ]

racc_action_pointer = [
    -2,    59,    59,    83,    27,     0,   nil,   nil,    56,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    30,   137,    -2,    30,   nil,   166,
   nil,   110,   nil ]

racc_action_default = [
    -2,   -38,    -1,    -3,    -2,    -7,    -9,   -11,    -2,   -13,
   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,   -23,
   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,   -32,   -33,
   -34,   -35,   -36,   -37,   -38,    -5,    -8,    -6,   -10,   -38,
    43,    -4,   -12 ]

racc_goto_table = [
    36,     2,    41,     1,   nil,    37,   nil,   nil,   nil,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36 ]

racc_goto_check = [
     4,     2,     3,     1,   nil,     2,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     3,     1,   -33,    -3,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3,     5,     6,     7 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 32, :_reduce_none,
  0, 33, :_reduce_2,
  1, 33, :_reduce_3,
  3, 33, :_reduce_4,
  2, 33, :_reduce_5,
  2, 33, :_reduce_6,
  1, 34, :_reduce_7,
  2, 34, :_reduce_8,
  1, 35, :_reduce_9,
  2, 35, :_reduce_10,
  1, 36, :_reduce_11,
  3, 36, :_reduce_12,
  1, 37, :_reduce_13,
  1, 37, :_reduce_14,
  1, 37, :_reduce_15,
  1, 37, :_reduce_16,
  1, 37, :_reduce_17,
  1, 37, :_reduce_18,
  1, 37, :_reduce_19,
  1, 37, :_reduce_20,
  1, 37, :_reduce_21,
  1, 37, :_reduce_22,
  1, 37, :_reduce_23,
  1, 37, :_reduce_24,
  1, 37, :_reduce_25,
  1, 37, :_reduce_26,
  1, 37, :_reduce_27,
  1, 37, :_reduce_28,
  1, 37, :_reduce_29,
  1, 37, :_reduce_30,
  1, 37, :_reduce_31,
  1, 37, :_reduce_32,
  1, 37, :_reduce_33,
  1, 37, :_reduce_34,
  1, 37, :_reduce_35,
  1, 37, :_reduce_36,
  1, 37, :_reduce_37 ]

racc_reduce_n = 38

racc_shift_n = 43

racc_token_table = {
  false => 0,
  :error => 1,
  :LEX_OR => 2,
  :LEX_QUANTIFIER => 3,
  :LEX_PAREN_START => 4,
  :LEX_PAREN_END => 5,
  :LEX_CHAR => 6,
  :LEX_BACK_REFER => 7,
  :LEX_CODE_LITERAL => 8,
  :LEX_NAMED_REFER => 9,
  :LEX_NAMED_GENERATE => 10,
  :LEX_CONTROL_LETTER => 11,
  :LEX_ESCAPED_LETTER => 12,
  :LEX_UNICODE => 13,
  :LEX_SIMPLIFIED_CLASS => 14,
  :LEX_UNICODE_CLASS => 15,
  :LEX_BRACKET => 16,
  :LEX_ANC_LINE_BEGIN => 17,
  :LEX_ANC_LINE_END => 18,
  :LEX_ANC_WORD_BOUND => 19,
  :LEX_ANC_WORD_UNBOUND => 20,
  :LEX_ANC_STRING_BEGIN => 21,
  :LEX_ANC_STRING_END => 22,
  :LEX_ANC_STRING_END2 => 23,
  :LEX_ANC_LOOK_BEHIND2 => 24,
  :LEX_ANC_MATCH_START => 25,
  :LEX_SPECIAL_LETTER => 26,
  :LEX_MINUS => 27,
  :LEX_AND_AND => 28,
  :LEX_SPACE => 29,
  :LEX_ANY_LETTER => 30 }

racc_nt_base = 31

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LEX_OR",
  "LEX_QUANTIFIER",
  "LEX_PAREN_START",
  "LEX_PAREN_END",
  "LEX_CHAR",
  "LEX_BACK_REFER",
  "LEX_CODE_LITERAL",
  "LEX_NAMED_REFER",
  "LEX_NAMED_GENERATE",
  "LEX_CONTROL_LETTER",
  "LEX_ESCAPED_LETTER",
  "LEX_UNICODE",
  "LEX_SIMPLIFIED_CLASS",
  "LEX_UNICODE_CLASS",
  "LEX_BRACKET",
  "LEX_ANC_LINE_BEGIN",
  "LEX_ANC_LINE_END",
  "LEX_ANC_WORD_BOUND",
  "LEX_ANC_WORD_UNBOUND",
  "LEX_ANC_STRING_BEGIN",
  "LEX_ANC_STRING_END",
  "LEX_ANC_STRING_END2",
  "LEX_ANC_LOOK_BEHIND2",
  "LEX_ANC_MATCH_START",
  "LEX_SPECIAL_LETTER",
  "LEX_MINUS",
  "LEX_AND_AND",
  "LEX_SPACE",
  "LEX_ANY_LETTER",
  "$start",
  "reg_exp",
  "reg_sel",
  "reg_seq",
  "reg_rep",
  "reg_elm",
  "reg_let" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_2(val, _values)
    TEmpty.new
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_3(val, _values)
    Selectable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_4(val, _values)
    val[0].add(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_5(val, _values)
    val[0].add(TEmpty.new)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_6(val, _values)
    sel = Selectable.new(TEmpty.new); sel.add(val[1]); sel
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_7(val, _values)
    Sequence.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_8(val, _values)
    val[0].add(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_9(val, _values)
    Repeatable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_10(val, _values)
    val[0].set_quant(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_11(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_12(val, _values)
    @options[:parens].add(Paren.new(val[0], val[1], val[2]))
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_13(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_14(val, _values)
    BackRefer.new(:LEX_BACK_REFER,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_15(val, _values)
    TLetter.new(:LEX_CODE_LITERAL,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_16(val, _values)
    BackRefer.new(:LEX_NAMED_REFER,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_17(val, _values)
    BackRefer.new(:LEX_NAMED_GENERATE, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_18(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_19(val, _values)
    TLetter.new(:LEX_ESCAPED_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_20(val, _values)
    TLetter.new(:LEX_UNICODE,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_21(val, _values)
    TLetter.new(:LEX_SIMPLIFIED_CLASS, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_22(val, _values)
    TLetter.new(:LEX_UNICODE_CLASS,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_23(val, _values)
    @bracket_parser.parse(val[0], @options)
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_24(val, _values)
    Anchor.new(:LEX_ANC_LINE_BEGIN,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_25(val, _values)
    Anchor.new(:LEX_ANC_LINE_END,    val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_26(val, _values)
    Anchor.new(:LEX_ANC_WORD_BOUND,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_27(val, _values)
    Anchor.new(:LEX_ANC_WORD_UNBOUND, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_28(val, _values)
    Anchor.new(:LEX_ANC_STRING_BEGIN, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_29(val, _values)
    Anchor.new(:LEX_ANC_STRING_END,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_30(val, _values)
    Anchor.new(:LEX_ANC_STRING_END2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_31(val, _values)
    Anchor.new(:LEX_ANC_LOOK_BEHIND2, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_32(val, _values)
    Anchor.new(:LEX_ANC_MATCH_START, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_33(val, _values)
    TLetter.new(:LEX_SPECIAL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_34(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_35(val, _values)
    TLetter.new(:LEX_AND_AND,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_36(val, _values)
    TLetter.new(:LEX_SPACE,          val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_37(val, _values)
    TLetter.new(:LEX_ANY_LETTER,     val[0])
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class RegtestFrontParser
