#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

# parser classes
require 'regtest/front/bracket-scanner'  # scanner class (for splitting the string)
require 'regtest/front/letter'           # parser class for a letter
require 'regtest/front/range'            # parser class for a range of letters
require 'regtest/front/selectable'       # parser class for a selectable element
require 'regtest/front/bracket'          # parser class for a character class (bracket)

class RegtestFrontBracketParser < Racc::Parser

module_eval(<<'...end bracket-parser.y/module_eval...', 'bracket-parser.y', 60)
# modules for sharing procedures with main (regex) parser
include Regtest::Front::Range
include Regtest::Front::Letter
include Regtest::Front::Selectable
include Regtest::Front::Bracket

# execute to parse
def parse(value, options)
  @bracket_str = value[0]
  @options = options

  # check / verify input string
  if(!md = @bracket_str.match(/^(\[\^?)(.*)\]$/))
    raise "Internal error. bracket notation error"
  end
  bracket_header = md[1]
  seq_str = md[2]
    
  # scanning for spliting into elements
  scanner = Regtest::Front::BracketScanner.new(options)
  @q = scanner.scan(seq_str)
  
  # execute to parse
  begin
    parse_result = do_parse
  rescue Racc::ParseError => ex
    raise "Bracket " + ex.message
  end
  
  
  # return an analized bracket to main routine
  Bracket.new(value, parse_result)
end

# parse next token
def next_token
  @q.shift
end

# error handling routine
def on_error(t, val, vstack)
  # warn "t=#{t}, val=#{val}, vstack=#{vstack}"
  raise "Bracket Parse error. str=#{@bracket_str} offset=#{val[1]}, letter=#{val[0]}, stack=#{vstack}"
end
...end bracket-parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     7,    22,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,     7,    25,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,     7,   nil,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,     7,
   nil,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,     7,   nil,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,     7,   nil,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,     9,    10,
    11,    12,    13,    20,    20,   nil,    28,    29,    19,   nil,
    20 ]

racc_action_check = [
     0,     4,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    20,    19,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,     2,   nil,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     8,
   nil,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     7,   nil,     7,     7,     7,     7,     7,     7,
     7,     7,     7,     7,     7,    26,   nil,    26,    26,    26,
    26,    26,    26,    26,    26,    26,    26,    26,    22,    22,
    22,    22,    22,    23,    24,   nil,    23,    24,     1,   nil,
     1 ]

racc_action_pointer = [
    -4,    88,    22,   nil,    -2,   nil,   nil,    48,    35,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,
     9,   nil,    71,    81,    82,   nil,    61,   nil,   nil,   nil ]

racc_action_default = [
   -21,   -21,    -1,    -3,    -6,    -7,    -8,   -21,   -21,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,
   -21,    -4,   -21,   -21,   -21,    30,    -2,    -5,    -9,   -10 ]

racc_goto_table = [
    21,     1,    26,    27,   nil,   nil,   nil,   nil,    23,    24,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21 ]

racc_goto_check = [
     3,     1,     2,     4,   nil,   nil,   nil,   nil,     1,     1,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     1,   -18,    -2,   -19,   nil,   nil ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,     6 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 18, :_reduce_1,
  3, 18, :_reduce_2,
  1, 19, :_reduce_3,
  2, 19, :_reduce_4,
  3, 20, :_reduce_5,
  1, 20, :_reduce_6,
  1, 20, :_reduce_7,
  1, 20, :_reduce_8,
  3, 23, :_reduce_9,
  3, 23, :_reduce_10,
  1, 21, :_reduce_11,
  1, 21, :_reduce_12,
  1, 21, :_reduce_13,
  1, 21, :_reduce_14,
  1, 21, :_reduce_15,
  1, 22, :_reduce_16,
  1, 22, :_reduce_17,
  1, 22, :_reduce_18,
  1, 22, :_reduce_19,
  1, 22, :_reduce_20 ]

racc_reduce_n = 21

racc_shift_n = 30

racc_token_table = {
  false => 0,
  :error => 1,
  :LEX_AND_AND => 2,
  :LEX_MINUS => 3,
  :LEX_BRACKET_START => 4,
  :LEX_BRACKET_END => 5,
  :LEX_BRACKET_START2 => 6,
  :LEX_CHAR => 7,
  :LEX_CODE_LITERAL => 8,
  :LEX_CONTROL_LETTER => 9,
  :LEX_ESCAPED_LETTER => 10,
  :LEX_UNICODE => 11,
  :LEX_POSIX_CHAR_CLASS => 12,
  :LEX_SIMPLIFIED_CLASS => 13,
  :LEX_UNICODE_CLASS => 14,
  :LEX_SPECIAL_LETTER => 15,
  :LEX_SPACE => 16 }

racc_nt_base = 17

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LEX_AND_AND",
  "LEX_MINUS",
  "LEX_BRACKET_START",
  "LEX_BRACKET_END",
  "LEX_BRACKET_START2",
  "LEX_CHAR",
  "LEX_CODE_LITERAL",
  "LEX_CONTROL_LETTER",
  "LEX_ESCAPED_LETTER",
  "LEX_UNICODE",
  "LEX_POSIX_CHAR_CLASS",
  "LEX_SIMPLIFIED_CLASS",
  "LEX_UNICODE_CLASS",
  "LEX_SPECIAL_LETTER",
  "LEX_SPACE",
  "$start",
  "brc_sq1",
  "brc_sq2",
  "brc_elm",
  "brc_lt1",
  "brc_lt2",
  "reg_bracket" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'bracket-parser.y', 8)
  def _reduce_1(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 10)
  def _reduce_2(val, _values)
    val[0].and(val[2])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 14)
  def _reduce_3(val, _values)
    Selectable.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 16)
  def _reduce_4(val, _values)
    val[0].add(val[1])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 20)
  def _reduce_5(val, _values)
    TRange.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 22)
  def _reduce_6(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 24)
  def _reduce_7(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 26)
  def _reduce_8(val, _values)
    val[0]
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 30)
  def _reduce_9(val, _values)
    Bracket.new(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 32)
  def _reduce_10(val, _values)
    Bracket.new(val[0], val[1])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 35)
  def _reduce_11(val, _values)
    TLetter.new(:LEX_CHAR,           val[0])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 36)
  def _reduce_12(val, _values)
    TLetter.new(:LEX_CODE_LITERAL,   val[0])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 37)
  def _reduce_13(val, _values)
    TLetter.new(:LEX_CONTROL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 38)
  def _reduce_14(val, _values)
    TLetter.new(:LEX_ESCAPED_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 39)
  def _reduce_15(val, _values)
    TLetter.new(:LEX_UNICODE,        val[0])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 42)
  def _reduce_16(val, _values)
    TLetter.new(:LEX_POSIX_CHAR_CLASS, val[0])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 43)
  def _reduce_17(val, _values)
    TLetter.new(:LEX_SIMPLIFIED_CLASS, val[0])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 44)
  def _reduce_18(val, _values)
    TLetter.new(:LEX_UNICODE_CLASS,  val[0])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 45)
  def _reduce_19(val, _values)
    TLetter.new(:LEX_SPECIAL_LETTER, val[0])
  end
.,.,

module_eval(<<'.,.,', 'bracket-parser.y', 46)
  def _reduce_20(val, _values)
    TLetter.new(:LEX_SPACE,          val[0])
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class RegtestFrontBracketParser
